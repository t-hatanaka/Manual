{
  "index.html": {
    "href": "index.html",
    "title": "令和4年度 民間ユースケース開発 UC22-003「容積率可視化シミュレータ」の成果物（Volume Shape Generator） | Volume Shape Generator",
    "keywords": "令和4年度 民間ユースケース開発 UC22-003「容積率可視化シミュレータ」の成果物（Volume Shape Generator） ユースケースの概要 近年、マンションの老朽化の急増が問題視される中、維持管理の適正化とともに、建替えの円滑化によるマンション再生の重要性が高まっています。 また、マンション建替円滑化法の施行により老朽化したマンションの建替えルールが整備されているものの、マンション所有者同士の合意形成及び建替えまでの実行プロセスの難易度がハードルとして存在しています。 今回の実証実験では、3D都市モデルの建築物モデルや都市計画モデルを解析し、建物の未消化容積率を直感的でわかりやすく可視化するアプリケーションを開発することにより、マンション所有者及び民間事業者による開発余地の把握を可能とし、建替え・有効活用等の活性化への寄与を目指しています。 開発システムの概要 今回の実証実験では、3D 都市モデルの建築物モデル及び道路モデルを活用して、都市計画及び建築基準法に基づく指定容積率によって建築可能な建物の最大ボリューム（以下、容積ボリューム）と既存建築物の差分（余剰容積）を三次元的に分析して可視化するシステムを開発しました。 GitHubリポジトリにて、以下の処理を行うアプリケーションをOSSとして公開しています。 建築物情報をJSON形式で受け取り、建築可能な建物の最大ボリュームと既存建築物の差分を3Dモデルを生成します。 建築物の3Dモデルデータの生成や、隣地斜線制限などの条件に従いモデルの加工を行う必要があるため、ブラウザ上で動くリアルタイム3DエンジンのBabylon.jsを使用しています。 生成した3Dモデルから、容積値の算出とGLB形式の書き出しを行います。 本アプリケーションでは機能確認用のサンプルを用意しています。SampleのJSON情報から3Dモデルを生成し、容積の数値表示とGLBファイルのダウンロードをテストできます。 Volume Shape Generatorは以下の機能を有したアプリケーションです。 ボリューム生成処理を行い、生成したボリュームから容積値とGLBファイルを取得する機能 上記ボリューム生成、データ取得を呼び出すAPI機能 API機能を使ってサンプルの建築物データからボリューム生成処理を行い、 生成したボリュームの容積値の表示とGLBファイルのダウンロードを行う画面を表示する機能確認用サンプル 各機能のソースコードは以下のディレクトリに格納されています。 ボリューム生成機能、API機能のソースコードはsrc/serviceディレクトリに格納されています。 確認用サンプルのソースコードはsrc/sampleディレクトリに格納されています。 src下のindex.html、main.ts、style.cssファイルはアプリケーションを実行した際にサンプルが実行されるように記述しています。 ライセンス 本マニュアルの著作権は国土交通省に帰属します。 本マニュアルはProject PLATEAUのサイトポリシー（CCBY4.0および政府標準利用規約2.0）に従い提供されています。 注意事項 本マニュアルは参考資料として提供しているものです。動作保証は行っておりません。 予告なく変更・削除する可能性があります。 本マニュアルの利用により生じた損失及び損害等について、国土交通省はいかなる責任も負わないものとします。 参考資料 容積率可視化シミュレータ技術検証レポート PLATEAU Webサイト Use caseページ「容積率可視化シミュレータ」 Babylon.js Webサイト"
  },
  "manual/APISpecifications.html": {
    "href": "manual/APISpecifications.html",
    "title": "API仕様 | Volume Shape Generator",
    "keywords": "API仕様 APIの概要 src/service/api/VolumeShapeGenerator.tsファイルの関数を利用し 容積値とGLBファイルの取得、Babylon.jsのScene上のObjectを破棄を行うことができます。 容積値とGLBの取得はgetVolumeShapesData関数を利用します。 Babylon.jsのScene上のObjectを破棄する場合はdisposeObject関数を利用します。 APIの処理の流れ getVolumeShapesData関数 関数の引数に渡すデータを用意します。 建築可能な建物の最大ボリュームと既存建築物の差分のモデル生成に必要な建物情報のJSONを用意します。 JSON作成に関しては「生成条件を指定したボリューム生成」のページの「3Dモデルデータ生成に必要な情報」の章を参照ください。 Babylon.js上で3Dモデルの加工処理を行うため、Babylon.jsのSceneを生成します。 関数を実行します。 src/service/api/VolumeShapeGenerator.tsのgetVolumeShapesData関数を実行します。 建物情報のJSONテキスト、Babylon.jsのScene、容積計算の詳細値、その他、取得するGLBファイルのPrefixやテストモードフラグのパラメータを引数として入力します。 容積計算の詳細値、取得するGLBファイルのPrefix、テストモードフラグにはデフォルト値が割り当てられていますので入力しなくても実行可能です。 容積計算の詳細値は容積の精度に関わります。値が小さい程詳細な計算を行いますが処理時間に影響します。 APIは実行されると以下の処理を行います。 1: 建築可能な建物の最大ボリュームの3Dモデルデータ生成を開始します。 建物形状のモデルデータを生成します。生成するモデルの高さは地域の高さ制限の値にします。 各種条件に従い、ブーリアン処理を行うためのモデルを作成し、既に生成した建物モデル対して減算処理を行います。 隣地斜線制限に従いブーリアン処理を行うためのモデルを作成し、同様に減算処理を続けていきます。 道路斜線制限に従い、同様に減算処理を続けていきます。 「階高の各フロア面積合計 ÷ 敷地面積 が 容積率以下」となる条件の最大の高さを算出し、その高さ以上を減算処理で削ります。 以上の処理で、建築可能な建物の最大ボリュームの生成が完了します。 2: 容積形状の体積計算とGLBの作成を行います。 建築可能な建物の最大ボリュームのモデルをGLBとして書き出します 建築可能な建物の最大ボリュームの容積を取得します。 容積は積層の面積 x 積層の間隔となるvolumeCalcDetailValの値で求め算出します。 建築可能な建物の最大ボリュームと既存建築物の差分データの取得に取りかかります。 元のビルの高さの情報に従い、その高さ以下を減算処理で削ります。このモデルが建築可能な建物の最大ボリュームと既存建築物の差分になります。 差分のモデルの容積を取得し、GLBを書き出します。 最大ボリュームの容積 - 残ったモデルの容積 で建築可能な建物の最大ボリュームと既存建築物の差分 元のビルの高さ以下のモデルも生成し、容積の取得とGLB書き出しを行います。 取得した各容積値とGLBをAPI実行の結果として返します。 disposeObject関数 Babylon.jsのScene上のObjectを破棄します。 第一引数にBABYLON.Sceneを入れます。 破棄しないObjectがある場合は第二引数のstring配列にObject名を入れます。"
  },
  "manual/ConditionalVolumeGeneration.html": {
    "href": "manual/ConditionalVolumeGeneration.html",
    "title": "生成条件を指定したボリューム生成 | Volume Shape Generator",
    "keywords": "生成条件を指定したボリューム生成 必要な建物情報をJSON形式にし、APIのgetVolumeShapesData関数に渡すことで生成条件を指定したボリューム生成を行うことができます。 3Dモデルデータ生成に必要な情報 3Dオブジェクトを生成するには既存建築物の以下の情報が必要になります。 敷地面積、階高、容積率 建物形状の高さの上限の算出に使用します。 建物形状のローカル座標 建物のフットプリント座標から建物形状のモデルデータを生成します。このモデルデータから、各種制限によるブーリアン処理を行います。 隣地斜線制限平面ローカル座標、道路斜線制限平面ローカル座標 制限面座標から建物形状のカッティング処理に必要なモデルを生成しブーリアン処理を行います。 地域の高さ制限 敷地面積、階高、容積率から算出する高さ上限より優先される高さ制限値です。 算定対象の建物の高さ 建築可能な建物の最大ボリュームと既存建築物の差分を表すために使用します。 建築物情報のJSONデータの用意について記します。 下記のコードは「サンプルデータを使ったボリューム生成」ページで使用しているJSONテキストデータをJSONファイル形式で表したものです。 生成条件を指定したボリューム生成を行う場合はこのようなJSONファイルをご用意下さい。 [ { //敷地面積 \"siteArea\": 64.54208, //建物形状ローカル座標 \"building\": [ { \"x\": 4.874860211275518, \"y\": -1.7919120267033577, \"z\": 0 }, { \"x\": 4.8747810469940305, \"y\": -1.786204481497407, \"z\": 0 }, { \"x\": 2.555339680518955, \"y\": 4.519403563346714, \"z\": 0 }, { \"x\": -4.866903026588261, \"y\": 1.789831669535488, \"z\": 0 }, { \"x\": -4.86551877995953, \"y\": 1.7845792341977358, \"z\": 0 }, { \"x\": -4.927262370940298, \"y\": 1.647432820405811, \"z\": 0 }, { \"x\": -3.9609530312009156, \"y\": -0.9793286826461554, \"z\": 0 }, { \"x\": -2.54695413261652, \"y\": -4.522207274567336, \"z\": 0 }, { \"x\": 4.874860211275518, \"y\": -1.7919120267033577, \"z\": 0 } ], //道路外側斜線制限面ローカル座標 \"syasenPlanes\": [ [ { \"x\": 9.324718687217683, \"y\": -11.179982529953122, \"z\": -0.000014738179743289948 }, { \"x\": -0.056850585620850325, \"y\": 11.992897959891707, \"z\": 37.50003549922258 }, { \"x\": -8.300155875273049, \"y\": 8.65557556413114, \"z\": 37.50003540609032 }, { \"x\": 1.0814618384465575, \"y\": -14.517285314388573, \"z\": -0.000014831312000751495 } ] ], //隣地斜線制限面ローカル座標 \"rinchPlanes\": [ [ { \"x\": -2.2614220874384046, \"y\": -5.963912645820528, \"z\": 30.999998805113137 }, { \"x\": 5.774045082274824, \"y\": -2.9426687844097614, \"z\": 52.46172823663801 }, { \"x\": -5.229699608404189, \"y\": 1.9306384297087789, \"z\": 30.99999972153455 } ], [ { \"x\": -5.229699608869851, \"y\": 1.9306384334340692, \"z\": 30.999999720603228 }, { \"x\": 0.11599631328135729, \"y\": -0.4368482059799135, \"z\": 41.426257128827274 }, { \"x\": 2.533916859421879, \"y\": 5.00749797327444, \"z\": 30.999999740161 } ], [ { \"x\": 2.533916859421879, \"y\": 5.00749797327444, \"z\": 30.999999740161 }, { \"x\": -2.224506298545748, \"y\": -5.706875113770366, \"z\": 51.51868245750666 }, { \"x\": 5.463830733206123, \"y\": -2.834273154847324, \"z\": 30.999999093823135 } ] ], //算定対象の建物の高さ \"citygml_me\": 17.554, //容積率 \"far\": 479.7, //階高 \"kaidaka\": 5.5, //生成する建物の高さをこの値で制限。容積率より優先 \"maxLimitH\": null } ] 各パラメーターに関して説明します。 siteArea 敷地面積を入力します。 入力する値の単位は平方メートルです。 敷地面積は、容積率と掛け算して、最大の延べ床面積を算出し、階数（建物高さ）の最大値を算定するために使用します。 building フットプリント(敷地に対する建築の占有領域)の中心を原点(x:0, y:0, z:0)とし、 フットプリントのポリゴンの各頂点座標を入力します。 座標は平面座標系(Z方向が高さを表します)、単位はメートルで入力します。 この座標配列から高さ方向に押し出しポリゴン生成方式で建物形状のモデルデータを生成します。 syasenPlanes 道路外側斜線制限平面のローカル座標を入力します。 座標は平面座標系(Z方向が高さを表します)、単位はメートルで入力します。 斜線制限とは道路境界線または隣地境界線からの距離に応じて建築物の各部分の高さを制限することにより、 道路や隣地の採光、通風を確保し、圧迫感を和らげるものです。 フットプリントの中心を原点(x:0, y:0, z:0)とし、 斜線制限の領域を空間内で平面として表す斜線制限平面のポリゴンの各頂点座標を入力します。 [ { \"x\": 9.324718687217683, \"y\": -11.179982529953122, \"z\": -0.000014738179743289948 }, { \"x\": -0.056850585620850325, \"y\": 11.992897959891707, \"z\": 37.50003549922258 }, { \"x\": -8.300155875273049, \"y\": 8.65557556413114, \"z\": 37.50003540609032 }, { \"x\": 1.0814618384465575, \"y\": -14.517285314388573, \"z\": -0.000014831312000751495 } ] 斜線制限が複数ある場合は全て入力します。 この座標配列から高さ方向に押し出しポリゴン生成方式でカット範囲のモデルデータを作成し、建物形状のモデルデータをカットします。 下図は道路斜線制限平面のイメージです。 rinchPlanes 隣地斜線制限平面のローカル座標を入力します。 座標は平面座標系(Z方向が高さを表します)、単位はメートルで入力します。 道路外側斜線制限平面の場合と同様にフットプリントの中心を原点(x:0, y:0, z:0)とし、 斜線制限の領域を空間内で平面として表す斜線制限平面のポリゴンの各頂点座標を入力します。 citygml_me 算定対象の建物の高さを入力します。 入力する値の単位はメートルです。 これは余剰容積ボリュームを算定する対象の建物の高さのことで、地盤面から既存のルーフまでの高さを指します。 far 容積率を入力します。 入力する値の単位はパーセントです。 容積率とは敷地面積に対する建物の延べ床面積の割合です。 kaidaka 階高を入力します。 入力する値の単位はメートルです。 階高は建物の各階の高さで、フロアに依らず一定の高さになります。 maxLimitH 生成する容積ボリュームの最大高さの制限値を指定します。 入力する値の単位はメートルです。 地区計画などで、地域ごとに建物高さの最大値が指定されている場合は、ここにその最大値を指定します。 建築物情報のJSONデータをAPIの関数に渡すと、本アプリケーションで定義されているBuildingParamという型エイリアスに格納されます。 type BuildingParam = { siteArea: number //敷地面積 building: BABYLON.Vector3[] //建物形状ローカル座標 syasenPlanes: BABYLON.Vector3[][] //道路外側斜線制限面ローカル座標 rinchPlanes: BABYLON.Vector3[][] //隣地斜線制限面ローカル座標 citygml_me: number //算定対象の建物の高さ far: number //容積率 kaidaka: number //階高 maxLimitH: number | null //生成する建物の高さをこの値で制限。容積率より優先 } ボリューム生成と確認 アプリケーションが用意している機能確認用サンプルの表示方法で、生成条件を指定したボリュームを確認する場合は下記手順を行って下さい。 確認用サンプルではsrc/sampleディレクトリ内のVolumeShapeGenerateControllerクラスのstartOperation関数内でBuildingParamSampleクラスのgetParamsJsonText関数を実行しJSONデータ取得処理を行っています。 生成条件を指定したボリューム生成を確認用サンプルの表示方法で確認したい場合は、 指定した生成条件に従ってJSONデータを作成し、 確認用サンプルのJSON取得処理部分を、作成したJSONデータを取得するように変更してボリューム生成を行います。 「サンプルデータを使ったボリューム生成」で紹介しました$ npm run devコマンドで確認することができます。 指定した生成条件に従い生成したボリュームから容積値とGLBファイルを取得する機能だけが必要な場合は、 src/serviceディレクトリ内のボリューム生成、データ取得機能とAPI機能のみ使用します。 src下のindex.html、main.ts、style.cssはプロジェクトに合うように適宜変更して下さい。 「API仕様」ページを確認し、src/service/api/VolumeShapeGenerator.tsファイルの関数に必要なデータを引数として渡し容積値とGLBファイルを取得して下さい。 ソースコードのビルド $ npm run devコマンドによる開発用ローカルサーバーでの確認だけでなく、 アプリケーションを本番環境で実行する場合は$ npm run buildコマンドでソースコードをビルドします。 コマンドラインを操作します。volume-shape-generatorディレクトリに移動し以下のコマンドを実行します。 $ npm run build volume-shape-generatorディレクトリ下にdistフォルダが作られ本番用に最適化されたコードが書き出されます。 ビルドが成功したら下記コマンドを実行しプレビュー用のサーバー上で確認ができます。 $ npm run preview npm run previewコマンドは、ソースコードをビルドしてプレビュー用の環境で実行するために使用されます。 通常、npm run devコマンドよりも本番環境に近い環境でアプリケーションを確認することができます。"
  },
  "manual/Preparation.html": {
    "href": "manual/Preparation.html",
    "title": "事前準備：璟境構築 | Volume Shape Generator",
    "keywords": "事前準備：璟境構築 GitHubのリポジトリのクローン Volume Shape Generatorのリポジトリのページにアクセスします。 ページの右側にある「Code」ボタンをクリックするとドロップダウンメニューが表示されます。 gitコマンドでリポジトリをクローンする場合はドロップダウンメニュー「HTTPS」をクリックします。 gitコマンドを利用する場合は予めgitをインストールしている必要があります。 gitをこちらからダウンロードし、インストールします。 クローンするリポジトリのURLが表示されるのでコピーします。 コマンドラインを開き、クローンするディレクトリに移動します。 以下のコマンドを入力するとリポジトリのクローンが始まります。 $ git clone <クローンするリポジトリのURL> gitコマンドを利用しない場合はZipファイルをダウンロードします。 ドロップダウンメニューの「Download ZIP」をクリックします。 ダウンロードしたZipファイルを展開します。 Node.jsのインストール Volume Shape GeneratorはNode.jsを使用しています。 Node.jsがインストールされていない場合は、以下URLからインストールしてください。 Node.jsをこちらからダウンロードし、インストールします。 パッケージのインストール npm installコマンドで、Volume Shape Generatorに必要なパッケージをインストールします。 コマンドラインを操作します。volume-shape-generatorディレクトリに移動し、以下のコマンドでパッケージのインストールを行います。 $ npm install"
  },
  "manual/SampleUsedVolumeGeneration.html": {
    "href": "manual/SampleUsedVolumeGeneration.html",
    "title": "サンプルデータを使ったボリューム生成 | Volume Shape Generator",
    "keywords": "サンプルデータを使ったボリューム生成 アプリケーションが用意している機能確認用サンプルを実行して、以下の機能を実装した画面を表示します。 サンプルの建築物データから生成したボリュームのモデル表示機能 容積値の表示機能 モデルデータをGLB形式でダウンロードするボタン機能 サンプルの建築物データには、本アプリケーションのbuildingParamSample.tsファイル内のJSONテキストデータが使用されます。 開発モードでアプリケーションを起動 Node.jsを使用するアプリケーションですので、サンプルはサーバー上で実行しブラウザで確認します。 確認手法の一つである、開発用サーバーを起動して確認するコマンドを利用します。 コマンドラインを開き、volume-shape-generatorディレクトリに移動します。 以下のコマンドを実行します。 $ npm run dev ローカルで開発用サーバーが起動します。表示されたURLをブラウザで開きます。 アプリケーションが起動し、機能確認用サンプルが実行されます。 ➜ Local: http://localhost:5173/ ➜ Network: use --host to expose ➜ press h to show help 機能確認用サンプルの処理の流れ src/main.tsからsrc/sample/VolumeShapeGenerateController.tsのstartOperation関数が実行されボリューム生成処理が始まります。 サンプル用のBabylon.jsのSceneとJSONテキストを引数としてAPIを実行し、容積値とGLBを受け取ります。 データの受け取りが成功すると、容積値の結果を表示します。 GLBのダウンロードボタンが表示されます。 ダウンロードボタンをクリックすると端末にGLBファイルがダウンロードされます。"
  }
}